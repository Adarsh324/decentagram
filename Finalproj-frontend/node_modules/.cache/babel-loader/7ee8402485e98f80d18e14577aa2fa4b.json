{"ast":null,"code":"var _jsxFileName = \"D:\\\\dev\\\\react\\\\finalProj\\\\Finalproj-frontend\\\\src\\\\context\\\\testContext.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { contractABI, contractAddress } from '../utils/constants';\nimport AuthenticationHash from '../utils/authenticateHash';\nimport web3Connection from '../web3Connection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const testContext = /*#__PURE__*/React.createContext();\nconst {\n  ethereum\n} = window;\nexport const getEthereumContract = () => {\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = provider.getSigner();\n  const testContract = new ethers.Contract(contractAddress, contractABI, signer);\n  return testContract;\n};\nexport const TestProvider = ({\n  children\n}) => {\n  _s();\n\n  const [connectedAccount, setconnectedAccount] = useState(\"\");\n  const [formData, setFormData] = useState({\n    name: \"\",\n    username: \"\",\n    password: \"\"\n  });\n  const [isLoading, setisLoading] = useState(false);\n  const [loginData, setloginData] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const [isLoggedIn, setisLoggedIn] = useState(false);\n  const [curUserName, setcurUserName] = useState(\"\");\n\n  const handleChange = (e, name) => {\n    setFormData(prevState => ({ ...prevState,\n      [name]: e.target.value\n    })); // console.log(formData);\n  };\n\n  const handleLoginDataChange = (e, name) => {\n    setloginData(prevState => ({ ...prevState,\n      [name]: e.target.value\n    }));\n  };\n\n  const checkIfWalletConnected = async () => {\n    if (!ethereum) return alert(\"pls install metamask\");\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length) {\n      setconnectedAccount(accounts[0]);\n    }\n\n    console.log(\"connected account :\" + accounts);\n    console.log(accounts);\n  };\n\n  const connectWallet = async () => {\n    try {\n      if (!ethereum) return alert(\"pls install metamask\");\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      setconnectedAccount(accounts[0]);\n    } catch (error) {\n      console.log(error); // throw new error(\"no eth object\");\n    }\n  };\n\n  const getUserAddress = async () => {\n    try {\n      if (!ethereum) return alert(\"pls install metamask\");\n      const testContract = getEthereumContract();\n      const userAddress = await testContract.getUserAddress();\n      return userAddress;\n    } catch (error) {\n      console.log(error); // throw new error(\"no eth object\");\n    }\n  };\n\n  const getUserName = async () => {\n    try {\n      if (!ethereum) return alert(\"pls install metamask\");\n      const testContract = await getEthereumContract();\n      const userName = await testContract.getUserName();\n      setcurUserName(userName);\n      return userName;\n    } catch (error) {\n      console.log(error); // throw new error(\"no eth object\");\n    }\n  };\n\n  const createUser = async () => {\n    try {\n      if (!ethereum) return alert(\"pls install metamask\");\n      const {\n        name,\n        username,\n        password\n      } = formData;\n      const testContract = getEthereumContract();\n      const web3 = await web3Connection();\n      const sign = await AuthenticationHash(username, connectedAccount, password, web3);\n      console.log(\"sign:\" + sign);\n      const userAdr = await testContract.getUserAddress();\n      console.log(\"userAdr:\" + userAdr);\n      const testHash = await testContract.regUser(username, sign);\n      setisLoading(true);\n      console.log(\"loading- \" + testHash.hash);\n      await testHash.wait();\n      setisLoading(false);\n      console.log('Success-' + testHash.hash);\n      const userCount = await testContract.getUserCount();\n      console.log(\"userCount:\" + userCount); // setuserCount(userCount.toNumber);\n    } catch (error) {\n      console.log(error); // throw new error(\"no eth object\");\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(testContext.Provider, {\n    value: {\n      connectWallet,\n      connectedAccount,\n      formData,\n      handleChange,\n      createUser,\n      loginData,\n      handleLoginDataChange,\n      getUserAddress,\n      setisLoggedIn,\n      isLoggedIn,\n      setloginData,\n      curUserName,\n      getUserName\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 12\n  }, this);\n};\n\n_s(TestProvider, \"rgjXBccw6ZfOsARw4Z+JGuG2pfw=\");\n\n_c = TestProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestProvider\");","map":{"version":3,"sources":["D:/dev/react/finalProj/Finalproj-frontend/src/context/testContext.jsx"],"names":["React","useEffect","useState","ethers","contractABI","contractAddress","AuthenticationHash","web3Connection","testContext","createContext","ethereum","window","getEthereumContract","provider","providers","Web3Provider","signer","getSigner","testContract","Contract","TestProvider","children","connectedAccount","setconnectedAccount","formData","setFormData","name","username","password","isLoading","setisLoading","loginData","setloginData","isLoggedIn","setisLoggedIn","curUserName","setcurUserName","handleChange","e","prevState","target","value","handleLoginDataChange","checkIfWalletConnected","alert","accounts","request","method","length","console","log","connectWallet","error","getUserAddress","userAddress","getUserName","userName","createUser","web3","sign","userAdr","testHash","regUser","hash","wait","userCount","getUserCount"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\r\nimport React,{useEffect, useState} from 'react';\r\nimport { ethers } from 'ethers';\r\n\r\nimport {contractABI,contractAddress} from '../utils/constants';\r\nimport AuthenticationHash from '../utils/authenticateHash';\r\nimport web3Connection from '../web3Connection';\r\n\r\n\r\nexport const testContext=React.createContext();\r\nconst {ethereum}=window;\r\n\r\n\r\nexport const getEthereumContract=()=>{\r\n    const provider =new ethers.providers.Web3Provider(ethereum);\r\n    const signer=provider.getSigner();\r\n    const testContract= new ethers.Contract(contractAddress,contractABI,signer);\r\n\r\n\r\n    return testContract;\r\n}\r\n\r\nexport const TestProvider=({children})=>{\r\n  const [connectedAccount, setconnectedAccount] = useState(\"\");\r\n  const [formData,setFormData]= useState({name:\"\",username:\"\",password:\"\"});\r\n  const [isLoading, setisLoading] = useState(false);\r\n  const [loginData,setloginData]= useState({username:\"\",password:\"\"});\r\n  const [isLoggedIn, setisLoggedIn] = useState(false);\r\n  const [curUserName, setcurUserName] = useState(\"\");\r\n const handleChange=(e,name)=>{\r\n    setFormData((prevState)=>({ ...prevState,[name]:e.target.value}));\r\n\r\n    // console.log(formData);\r\n }\r\n\r\n const handleLoginDataChange=(e,name)=>{\r\n    setloginData((prevState)=>({ ...prevState,[name]:e.target.value}));\r\n }\r\n  const checkIfWalletConnected=async()=>{\r\n        if(!ethereum) return alert (\"pls install metamask\");\r\n        const accounts =await ethereum.request({method:'eth_accounts'});\r\n        if(accounts.length){\r\n            setconnectedAccount(accounts[0]);\r\n        }\r\n       \r\n        console.log(\"connected account :\"+accounts);\r\n        console.log(accounts);\r\n    }\r\n    \r\n    const connectWallet=async()=>{\r\n        try {\r\n            if(!ethereum) return alert (\"pls install metamask\");\r\n            const accounts =await ethereum.request({method:'eth_requestAccounts'});\r\n            setconnectedAccount(accounts[0]);\r\n        } catch (error) {\r\n            console.log(error);\r\n            // throw new error(\"no eth object\");\r\n        }\r\n    }\r\n    const getUserAddress=async()=>{\r\n        try {\r\n            if(!ethereum) return alert (\"pls install metamask\");\r\n           \r\n            const testContract=getEthereumContract();\r\n              \r\n        const userAddress=await testContract.getUserAddress();  \r\n        return userAddress;\r\n        \r\n        } catch (error) {\r\n            console.log(error);\r\n            // throw new error(\"no eth object\");\r\n        }\r\n    }\r\n\r\n    const getUserName=async()=>{\r\n        try {\r\n            if(!ethereum) return alert (\"pls install metamask\");\r\n            \r\n            const testContract=await getEthereumContract();\r\n            \r\n          \r\n           \r\n        const userName=await testContract.getUserName();  \r\n        setcurUserName(userName);\r\n         return userName;\r\n        \r\n        } catch (error) {\r\n            console.log(error);\r\n            // throw new error(\"no eth object\");\r\n        }\r\n    }\r\n\r\n    const createUser=async ()=>{\r\n        try {\r\n            if(!ethereum) return alert (\"pls install metamask\");\r\n            const {name,username,password}=formData;\r\n            const testContract=getEthereumContract();\r\n            \r\n            const web3 = await web3Connection();\r\n           const sign=await AuthenticationHash(username,connectedAccount,password,web3);\r\n           console.log(\"sign:\"+sign);\r\n           \r\n            const userAdr= await testContract.getUserAddress();\r\n            console.log(\"userAdr:\"+userAdr);\r\n           const testHash=await testContract.regUser(username,sign);\r\n           setisLoading(true);\r\n           console.log(\"loading- \"+testHash.hash);\r\n            await testHash.wait();\r\n            setisLoading(false);\r\n            console.log('Success-'+testHash.hash);\r\n           \r\n        const userCount=await testContract.getUserCount();  \r\n        console.log(\"userCount:\"+userCount);  \r\n            // setuserCount(userCount.toNumber);\r\n        } catch (error) {\r\n            console.log(error);\r\n            // throw new error(\"no eth object\");\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        checkIfWalletConnected();\r\n    },[]);\r\n    return(<testContext.Provider value={\r\n        {connectWallet,\r\n        connectedAccount,\r\n        formData,\r\n        handleChange,\r\n        createUser,\r\n        loginData,\r\n        handleLoginDataChange,\r\n        getUserAddress,\r\n        setisLoggedIn,\r\n        isLoggedIn,\r\n        setloginData,\r\n        curUserName,\r\n        getUserName,\r\n        \r\n        }}>\r\n        {children}\r\n    </testContext.Provider>);\r\n}"]},"metadata":{},"sourceType":"module"}