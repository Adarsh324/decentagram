{"ast":null,"code":"import { getEthereumContract } from '../context/testContext';\nimport web3Connection from '../web3Connection';\nimport SignData from './SignData';\n\nconst AuthValidation = async (username, accountAddress, password) => {\n  let testContract = getEthereumContract();\n  const web3 = await web3Connection();\n  let userAddress = await testContract.getUserAddress();\n\n  if (userAddress.toLowerCase() !== accountAddress.toLowerCase()) {\n    console.log(\"userAddress.toLowerCase() !== accountAddress.toLowerCase()\");\n    return false;\n  } else {\n    let signedData = await SignData(username, accountAddress, web3);\n    let passwordHash = await web3.eth.accounts.hashMessage(password);\n    let hash = await web3.eth.accounts.hashMessage(signedData + passwordHash); // get hash from the contract\n\n    let hashFromContract = await testContract.getSignatureHash();\n\n    if (hash === hashFromContract) {\n      return true;\n    } else {\n      console.log(\"hash != hashFromContract\");\n      console.log(\"hash:\" + hash);\n      console.log(\"hashFromContract:\" + hashFromContract);\n      return false;\n    }\n  }\n};\n\n_c = AuthValidation;\nexport default AuthValidation;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthValidation\");","map":{"version":3,"sources":["D:/dev/react/finalProj/Finalproj-frontend/src/utils/AuthValidation.js"],"names":["getEthereumContract","web3Connection","SignData","AuthValidation","username","accountAddress","password","testContract","web3","userAddress","getUserAddress","toLowerCase","console","log","signedData","passwordHash","eth","accounts","hashMessage","hash","hashFromContract","getSignatureHash"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,wBAApC;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,cAAc,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,EAAiCC,QAAjC,KAA8C;AACjE,MAAIC,YAAY,GAAEP,mBAAmB,EAArC;AACA,QAAMQ,IAAI,GAAG,MAAMP,cAAc,EAAjC;AACA,MAAIQ,WAAW,GAAG,MAAMF,YAAY,CAACG,cAAb,EAAxB;;AAEA,MAAID,WAAW,CAACE,WAAZ,OAA8BN,cAAc,CAACM,WAAf,EAAlC,EAAgE;AAC5DC,IAAAA,OAAO,CAACC,GAAR,CAAY,4DAAZ;AACA,WAAO,KAAP;AACH,GAHD,MAGO;AACH,QAAIC,UAAU,GAAG,MAAMZ,QAAQ,CAACE,QAAD,EAAWC,cAAX,EAA2BG,IAA3B,CAA/B;AACA,QAAIO,YAAY,GAAG,MAAMP,IAAI,CAACQ,GAAL,CAASC,QAAT,CAAkBC,WAAlB,CAA8BZ,QAA9B,CAAzB;AAEA,QAAIa,IAAI,GAAG,MAAMX,IAAI,CAACQ,GAAL,CAASC,QAAT,CAAkBC,WAAlB,CAA8BJ,UAAU,GAAGC,YAA3C,CAAjB,CAJG,CAMH;;AACA,QAAIK,gBAAgB,GAAG,MAAMb,YAAY,CAACc,gBAAb,EAA7B;;AAEA,QAAIF,IAAI,KAAKC,gBAAb,EAA+B;AAC3B,aAAO,IAAP;AACH,KAFD,MAEO;AACHR,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAQM,IAApB;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAoBO,gBAAhC;AACA,aAAO,KAAP;AACH;AACJ;AACJ,CA1BD;;KAAMjB,c;AA4BN,eAAeA,cAAf","sourcesContent":["import { getEthereumContract } from '../context/testContext';\r\nimport web3Connection from '../web3Connection';\r\nimport SignData from './SignData';\r\n\r\nconst AuthValidation = async (username, accountAddress, password) => {\r\n    let testContract= getEthereumContract();\r\n    const web3 = await web3Connection();\r\n    let userAddress = await testContract.getUserAddress();\r\n\r\n    if (userAddress.toLowerCase() !== accountAddress.toLowerCase()) {\r\n        console.log(\"userAddress.toLowerCase() !== accountAddress.toLowerCase()\");\r\n        return false;\r\n    } else {\r\n        let signedData = await SignData(username, accountAddress, web3);\r\n        let passwordHash = await web3.eth.accounts.hashMessage(password);\r\n\r\n        let hash = await web3.eth.accounts.hashMessage(signedData + passwordHash);\r\n\r\n        // get hash from the contract\r\n        let hashFromContract = await testContract.getSignatureHash();\r\n\r\n        if (hash === hashFromContract) {\r\n            return true;\r\n        } else {\r\n            console.log(\"hash != hashFromContract\");\r\n            console.log(\"hash:\"+hash);\r\n            console.log(\"hashFromContract:\"+hashFromContract);\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default AuthValidation;"]},"metadata":{},"sourceType":"module"}