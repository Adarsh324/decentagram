{"ast":null,"code":"var _jsxFileName = \"D:\\\\dev\\\\react\\\\finalProj\\\\Finalproj-frontend\\\\src\\\\pages\\\\testChat\\\\testChat.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./testChat.css\";\nimport { useContext, useState, useEffect } from \"react\";\nimport { testContext } from \"../../context/testContext\";\nimport Web3 from 'web3';\nimport { chatcontractAddress, chatcontractABI } from \"../chat/chatConstants\";\nimport React from \"react\";\nimport Topbar from \"../../components/topbar/Topbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TestChat() {\n  _s();\n\n  const [msg, setmsg] = useState();\n  const [addr, setaddr] = useState();\n  const [acs, setacs] = useState([[], {}]); // const [msgList, setmsgList] = useState({});\n\n  let web3 = new Web3(window.ethereum);\n  let chatcontract = new web3.eth.Contract(chatcontractABI, chatcontractAddress);\n  const {\n    connectedAccount\n  } = useContext(testContext);\n  var accounts = [];\n  var myMap = {};\n  var msgs = {};\n  useEffect(() => {\n    chatcontract.getPastEvents('message', {\n      fromBlock: 0,\n      toBlock: 'latest'\n    }, function (err, data) {\n      // console.log(data);\n      let x = data.length;\n\n      for (var n = 0; n < x; n++) {\n        console.log(data[n].returnValues.from === connectedAccount);\n\n        if (false) {\n          console.log(\"Sameacc\");\n          continue;\n        }\n\n        if (data[n].returnValues.to !== connectedAccount) {\n          if (!myMap[data[n].returnValues.from]) {\n            myMap[data[n].returnValues.from] = true;\n            accounts.push(data[n].returnValues.from);\n            msgs[data[n].returnValues.from] = []; // console.log(msgs[data[n].returnValues.from]);\n          }\n\n          msgs[data[n].returnValues.from].push(data[n].returnValues.message);\n        }\n      }\n\n      for (var m = 0; m < accounts.length; m++) {// console.log(accounts[m]);\n        // console.log(msgs[accounts[m]]);\n      }\n\n      setacs([accounts, msgs]); // setmsgList(msgs);\n    });\n  }, [connectedAccount]);\n\n  function sendNewMsg() {\n    var message = msg;\n    var address = addr;\n    alert(address + \":\" + message);\n    var date = new Date().toLocaleDateString(\"IN\");\n    var time = new Date().toLocaleTimeString(\"IN\");\n    time = time.split('.');\n    var accurateTime = date + ' ' + time[0] + ':' + time[1];\n    chatcontract.methods.sendMessage(address, message, accurateTime).send({\n      from: connectedAccount\n    }, function (err, transcationHash) {\n      if (err) {\n        console.log(err);\n      } else {\n        console.log(\"message sent,trnx hash:\" + transcationHash);\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Topbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Current Ac:\", connectedAccount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"address\",\n      id: \"address-send\",\n      onChange: e => setaddr(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 111\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"message\",\n      id: \"msg-send\",\n      onChange: e => setmsg(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 106\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"btn-send\",\n      onClick: sendNewMsg,\n      children: \"send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"rec-msgs\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: acs[0].map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [item, \"  :\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 45\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: acs[1][item].map((ms, ii) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: ms\n            }, ii, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 51\n          }, this)]\n        }, item, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 12\n  }, this);\n}\n\n_s(TestChat, \"Km/kEXKfIODmQTwWAtzy1G0+txI=\");\n\n_c = TestChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestChat\");","map":{"version":3,"sources":["D:/dev/react/finalProj/Finalproj-frontend/src/pages/testChat/testChat.jsx"],"names":["useContext","useState","useEffect","testContext","Web3","chatcontractAddress","chatcontractABI","React","Topbar","TestChat","msg","setmsg","addr","setaddr","acs","setacs","web3","window","ethereum","chatcontract","eth","Contract","connectedAccount","accounts","myMap","msgs","getPastEvents","fromBlock","toBlock","err","data","x","length","n","console","log","returnValues","from","to","push","message","m","sendNewMsg","address","alert","date","Date","toLocaleDateString","time","toLocaleTimeString","split","accurateTime","methods","sendMessage","send","transcationHash","e","target","value","map","item","index","ms","ii"],"mappings":"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","sourcesContent":["import \"./testChat.css\";\r\nimport { useContext,useState,useEffect } from \"react\";\r\nimport { testContext } from \"../../context/testContext\";\r\nimport Web3 from 'web3';\r\nimport {chatcontractAddress,chatcontractABI} from \"../chat/chatConstants\";\r\nimport React from \"react\";\r\nimport Topbar from \"../../components/topbar/Topbar\";\r\n\r\n\r\nexport default function TestChat() {\r\n    const [msg, setmsg] = useState();\r\n    const [addr, setaddr] = useState();\r\n    const [acs, setacs] = useState([[],{}]);\r\n    // const [msgList, setmsgList] = useState({});\r\n  \r\n    \r\n    \r\n    \r\n    let web3 = new Web3(window.ethereum)\r\n    let chatcontract = new web3.eth.Contract(chatcontractABI, chatcontractAddress);\r\n       const {\r\n        connectedAccount\r\n      } =  useContext(testContext);\r\n    var accounts=[]; \r\n    var myMap={};\r\n    var msgs={};\r\n    useEffect(() => {\r\n         chatcontract.getPastEvents('message', {\r\n            fromBlock: 0,\r\n            toBlock: 'latest',\r\n    \r\n          },function (err, data) {\r\n            // console.log(data);\r\n            let x = data.length;\r\n            for (var n = 0; n < x; n++) {\r\n               console.log(data[n].returnValues.from===connectedAccount);\r\n                if(false){\r\n                    console.log(\"Sameacc\");\r\n                    continue;\r\n                }\r\n              \r\n                if((data[n].returnValues.to!==connectedAccount)){\r\n                \r\n                   \r\n              if(!myMap[data[n].returnValues.from]){\r\n                \r\n                myMap[data[n].returnValues.from]=true;\r\n               \r\n                    accounts.push(data[n].returnValues.from);\r\n                    msgs[data[n].returnValues.from]=[];\r\n                    // console.log(msgs[data[n].returnValues.from]);\r\n                \r\n                   \r\n                \r\n              }\r\n              msgs[data[n].returnValues.from].push(data[n].returnValues.message);\r\n            \r\n            }\r\n            }\r\n    \r\n          \r\n            for(var m=0;m<accounts.length;m++){\r\n                // console.log(accounts[m]);\r\n                // console.log(msgs[accounts[m]]);\r\n    \r\n            }\r\n            setacs([accounts,msgs]);\r\n            // setmsgList(msgs);\r\n           \r\n            \r\n           \r\n          });\r\n    }, [connectedAccount]);\r\n    \r\n\r\n      function sendNewMsg(){\r\n        var message=msg;\r\n        var address=addr;\r\n        alert(address+\":\"+message);\r\n        var date = new Date().toLocaleDateString(\"IN\");\r\n        var time = new Date().toLocaleTimeString(\"IN\");\r\n        time = time.split('.')\r\n        var accurateTime = date + ' ' + time[0] + ':' + time[1];\r\n\r\n        chatcontract.methods.sendMessage(address, message, accurateTime).send({ from: connectedAccount }, function (err, transcationHash) {\r\n            if (err) {\r\n                console.log(err);\r\n            }\r\n            else{\r\n                console.log(\"message sent,trnx hash:\"+transcationHash);\r\n            }\r\n        });\r\n      }\r\n\r\n    return(<div>\r\n      <Topbar />\r\n        <h4>Current Ac:{connectedAccount}</h4>\r\n        <input type=\"text\" placeholder=\"address\" id=\"address-send\" onChange={(e) => setaddr(e.target.value)}/><br/>\r\n        <input type=\"text\" placeholder=\"message\" id=\"msg-send\" onChange={(e) => setmsg(e.target.value)}/><br/>\r\n        <div class=\"btn-send\" onClick={sendNewMsg}>send</div>\r\n\r\n        <h2>Messages</h2>\r\n        <div id=\"rec-msgs\">\r\n        <ul>\r\n            \r\n           {acs[0].map((item, index) => (\r\n                    <li key={item}>{item}  :<br/> <ul>\r\n                          \r\n                            {acs[1][item].map((ms, ii) => (\r\n                    <li key={ii}>{ms}</li>\r\n                ))}\r\n\r\n                        </ul></li>\r\n                ))}\r\n        </ul>\r\n        </div>\r\n    </div>);\r\n}"]},"metadata":{},"sourceType":"module"}